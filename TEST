	let build_currents param ph pb =
		let rec locals p res newStat =
			let tmp_res = (List.rev p.header.local_process_list) 
			in if (List.length p.header.local_process_list)>0
				then locals (List.hd tmp_res) (tmp_res@res) false
				else res, newStat
		in let res, newState =	try(locals (List.hd (List.tl param.proc_cur)) [] true)
								with Failure(_) -> [], true
			in let noconcat = try((List.hd param.proc_cur)
								= List.hd ((List.hd (List.tl param.proc_cur)).header.local_process_list))
								with _ -> true
				in let delMultiples li =
						let rec del res = function
							|[] -> res
							|e::l -> if( try(e = List.hd l)
										with _ -> false )
									then del (e::res) (List.tl l)
									else del (e::res) l
						in del [] (List.rev li)
					in if (noconcat)
						then (List.tl param.proc_cur), newState
						else delMultiples(res@(List.tl param.proc_cur)), newState

	let tfr_process param ph pb = 
		let nproc_cur, newStat = build_currents param ph pb
